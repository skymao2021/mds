"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileMatcher = exports.isFileMatch = exports.matcher = exports.isMatch = void 0;
exports.isDynamicPattern = isDynamicPattern;
const tslib_1 = require("tslib");
const node_path_1 = tslib_1.__importDefault(require("node:path"));
const picomatch_1 = require("picomatch");
function isDynamicPattern(pattern, options) {
    if (options?.caseSensitiveMatch === false) {
        return true;
    }
    const state = (0, picomatch_1.scan)(pattern);
    return state.isGlob || state.negated;
}
const normalizeBackslashes = (str) => str.replaceAll('\\', '/');
const defaultFormat = (path) => path.replace(/^\.\//, '');
const isMatchBase = (path, pattern, options) => {
    path = normalizeBackslashes(path);
    pattern = normalizeBackslashes(pattern);
    if (path.startsWith('./') && !/^(\.\/|\*{1,2})/.test(pattern)) {
        return false;
    }
    return (0, picomatch_1.isMatch)(path, pattern, { format: defaultFormat, ...options });
};
const isMatch = (pathname, patterns, options) => {
    patterns = Array.isArray(patterns) ? patterns : [patterns];
    return patterns.some(p => isMatchBase(pathname, p, options));
};
exports.isMatch = isMatch;
const matcher = (patterns, options) => (pathname) => !!patterns && (0, exports.isMatch)(pathname, patterns, options);
exports.matcher = matcher;
const isFileMatch = (pathname, patterns, options) => (0, exports.isMatch)(pathname, patterns, options) ||
    (0, exports.isMatch)(pathname, (Array.isArray(patterns) ? patterns : [patterns]).map(g => node_path_1.default.resolve(g)), options);
exports.isFileMatch = isFileMatch;
const fileMatcher = (patterns, options) => (pathname) => (0, exports.isFileMatch)(pathname, patterns, options);
exports.fileMatcher = fileMatcher;
//# sourceMappingURL=glob-match.js.map