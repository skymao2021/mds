import objectAssign from 'object-assign';
import ajax from './utils/ajax';
import { unix, blobToBuffer, assertOptions, getContentMd5, getSignature } from './utils';

var TinyOSS =
/*#__PURE__*/
function () {
  function TinyOSS(options) {
    if (options === void 0) {
      options = {};
    }

    assertOptions(options);
    this.opts = objectAssign({
      region: 'oss-cn-hangzhou',
      internal: false,
      cname: false,
      secure: false,
      timeout: 60000
    }, options);
    var _this$opts = this.opts,
        bucket = _this$opts.bucket,
        region = _this$opts.region,
        endpoint = _this$opts.endpoint,
        internal = _this$opts.internal;
    this.host = '';

    if (endpoint) {
      this.host = endpoint;
    } else {
      var host = bucket;

      if (internal) {
        host += '-internal';
      }

      host += "." + region + ".aliyuncs.com";
      this.host = host;
    }
  }

  var _proto = TinyOSS.prototype;

  _proto.put = function put(objectName, blob, options) {
    var _this = this;

    if (options === void 0) {
      options = {};
    }

    return new Promise(function (resolve, reject) {
      blobToBuffer(blob).then(function (buf) {
        var _this$opts2 = _this.opts,
            accessKeyId = _this$opts2.accessKeyId,
            accessKeySecret = _this$opts2.accessKeySecret,
            stsToken = _this$opts2.stsToken,
            bucket = _this$opts2.bucket;
        var verb = 'PUT';
        var contentMd5 = getContentMd5(buf);
        var contentType = blob.type;
        var headers = {
          'Content-Md5': contentMd5,
          'Content-Type': contentType,
          'x-oss-date': new Date().toGMTString()
        };

        if (stsToken) {
          headers['x-oss-security-token'] = stsToken;
        }

        var signature = getSignature({
          verb: verb,
          contentMd5: contentMd5,
          headers: headers,
          bucket: bucket,
          objectName: objectName,
          accessKeyId: accessKeyId,
          accessKeySecret: accessKeySecret
        });
        headers.Authorization = "OSS " + accessKeyId + ":" + signature;
        var protocol = _this.opts.secure ? 'https' : 'http';
        var url = protocol + "://" + _this.host + "/" + objectName;
        return ajax(url, {
          method: verb,
          headers: headers,
          data: blob,
          timeout: _this.opts.timeout,
          onprogress: options.onprogress
        });
      }).then(resolve)["catch"](reject);
    });
  } // https://help.aliyun.com/document_detail/45126.html
  ;

  _proto.putSymlink = function putSymlink(objectName, targetObjectName) {
    var _this$opts3 = this.opts,
        accessKeyId = _this$opts3.accessKeyId,
        accessKeySecret = _this$opts3.accessKeySecret,
        stsToken = _this$opts3.stsToken,
        bucket = _this$opts3.bucket;
    var verb = 'PUT';
    var headers = {
      'x-oss-date': new Date().toGMTString(),
      'x-oss-symlink-target': encodeURI(targetObjectName)
    };

    if (stsToken) {
      headers['x-oss-security-token'] = stsToken;
    }

    var signature = getSignature({
      verb: verb,
      headers: headers,
      bucket: bucket,
      objectName: objectName,
      accessKeyId: accessKeyId,
      accessKeySecret: accessKeySecret,
      subResource: {
        symlink: ''
      }
    });
    headers.Authorization = "OSS " + accessKeyId + ":" + signature;
    var protocol = this.opts.secure ? 'https' : 'http';
    var url = protocol + "://" + this.host + "/" + objectName + "?symlink";
    return ajax(url, {
      method: verb,
      headers: headers,
      timeout: this.opts.timeout
    });
  };

  _proto.signatureUrl = function signatureUrl(objectName, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$expires = _options.expires,
        expires = _options$expires === void 0 ? 1800 : _options$expires,
        method = _options.method,
        process = _options.process,
        response = _options.response;
    var _this$opts4 = this.opts,
        accessKeyId = _this$opts4.accessKeyId,
        accessKeySecret = _this$opts4.accessKeySecret,
        stsToken = _this$opts4.stsToken,
        bucket = _this$opts4.bucket;
    var headers = {};
    var subResource = {};

    if (process) {
      var processKeyword = 'x-oss-process';
      subResource[processKeyword] = process;
    }

    if (response) {
      Object.keys(response).forEach(function (k) {
        var key = "response-" + k.toLowerCase();
        subResource[key] = response[k];
      });
    }

    Object.keys(options).forEach(function (key) {
      var lowerKey = key.toLowerCase();
      var value = options[key];

      if (lowerKey.indexOf('x-oss-') === 0) {
        headers[lowerKey] = value;
      } else if (lowerKey.indexOf('content-md5') === 0) {
        headers[key] = value;
      } else if (lowerKey.indexOf('content-type') === 0) {
        headers[key] = value;
      } else if (lowerKey !== 'expires' && lowerKey !== 'response' && lowerKey !== 'process' && lowerKey !== 'method') {
        subResource[lowerKey] = value;
      }
    });
    var securityToken = options['security-token'] || stsToken;

    if (securityToken) {
      subResource['security-token'] = securityToken;
    }

    var expireUnix = unix() + expires;
    var signature = getSignature({
      type: 'url',
      verb: method || 'GET',
      accessKeyId: accessKeyId,
      accessKeySecret: accessKeySecret,
      bucket: bucket,
      objectName: objectName,
      headers: headers,
      subResource: subResource,
      expires: expireUnix
    });
    var protocol = this.opts.secure ? 'https' : 'http';
    var url = protocol + "://" + this.host + "/" + objectName;
    url += "?OSSAccessKeyId=" + accessKeyId;
    url += "&Expires=" + expireUnix;
    url += "&Signature=" + encodeURIComponent(signature);
    Object.keys(subResource).forEach(function (k) {
      url += "&" + k + "=" + encodeURIComponent(subResource[k]);
    });
    return url;
  };

  return TinyOSS;
}();

export { TinyOSS as default };