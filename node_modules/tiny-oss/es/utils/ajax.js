export default function ajax(url, options) {
  if (options === void 0) {
    options = {};
  }

  return new Promise(function (resolve, reject) {
    var _options = options,
        _options$async = _options.async,
        async = _options$async === void 0 ? true : _options$async,
        _options$data = _options.data,
        data = _options$data === void 0 ? null : _options$data,
        _options$headers = _options.headers,
        headers = _options$headers === void 0 ? {} : _options$headers,
        _options$method = _options.method,
        method = _options$method === void 0 ? 'get' : _options$method,
        _options$timeout = _options.timeout,
        timeout = _options$timeout === void 0 ? 0 : _options$timeout,
        onprogress = _options.onprogress;
    var xhr = new XMLHttpRequest();
    var timerId;

    if (timeout) {
      timerId = setTimeout(function () {
        reject(new Error("the request timeout " + timeout + "ms"));
      }, timeout);
    }

    xhr.onerror = function () {
      reject(new Error('unknown error'));
    };

    if (xhr.upload) {
      // Note: the progress event must be located before the xhr.open method
      xhr.upload.onprogress = onprogress;
    }

    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4) {
        if (timeout) clearTimeout(timerId);

        if (xhr.status >= 200 && xhr.status < 300) {
          resolve(xhr.response, xhr);
        } else {
          var err = new Error('the request is error');
          reject(err);
        }
      }
    };

    xhr.open(method, url, async);
    Object.keys(headers).forEach(function (key) {
      xhr.setRequestHeader(key, headers[key]);
    });

    try {
      xhr.send(data);
    } catch (err) {
      reject(err);
    }
  });
}