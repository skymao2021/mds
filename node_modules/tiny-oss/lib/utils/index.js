"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.unix = unix;
exports.blobToBuffer = blobToBuffer;
exports.assertOptions = assertOptions;
exports.getContentMd5 = getContentMd5;
exports.getCanonicalizedOSSHeaders = getCanonicalizedOSSHeaders;
exports.getCanonicalizedResource = getCanonicalizedResource;
exports.getSignature = getSignature;

var _md = _interopRequireDefault(require("md5"));

var _base64Js = _interopRequireDefault(require("base64-js"));

var _digest = _interopRequireDefault(require("../../vendor/digest"));

function isDate(obj) {
  return obj && Object.prototype.toString.call(obj) === '[object Date]' && obj.toString !== 'Invalid Date';
}

function unix(date) {
  var d;

  if (date) {
    d = new Date(date);
  }

  if (!isDate(d)) {
    d = new Date();
  }

  return Math.round(d.getTime() / 1000);
}

function blobToBuffer(blob) {
  return new Promise(function (resolve, reject) {
    var fr = new FileReader();

    fr.onload = function () {
      var result = new Uint8Array(fr.result);
      resolve(result);
    };

    fr.onerror = function () {
      reject(fr.error);
    };

    fr.readAsArrayBuffer(blob);
  });
}

function assertOptions(options) {
  var accessKeyId = options.accessKeyId,
      accessKeySecret = options.accessKeySecret,
      bucket = options.bucket,
      endpoint = options.endpoint;

  if (!accessKeyId) {
    throw new Error('need accessKeyId');
  }

  if (!accessKeySecret) {
    throw new Error('need accessKeySecret');
  }

  if (!bucket && !endpoint) {
    throw new Error('need bucket or endpoint');
  }
}

function hexToBuffer(hex) {
  var arr = [];

  for (var i = 0; i < hex.length; i += 2) {
    arr.push(parseInt(hex[i] + hex[i + 1], 16));
  }

  return Uint8Array.from(arr);
}

function getContentMd5(buf) {
  // md5 doesn't work for Uint8Array
  var bytes = Array.prototype.slice.call(buf, 0);
  var md5Buf = hexToBuffer((0, _md["default"])(bytes));
  return _base64Js["default"].fromByteArray(md5Buf);
}

function getCanonicalizedOSSHeaders(headers) {
  var result = '';
  var headerNames = Object.keys(headers);
  headerNames = headerNames.map(function (name) {
    return name.toLowerCase();
  });
  headerNames.sort();
  headerNames.forEach(function (name) {
    if (name.indexOf('x-oss-') === 0) {
      result += name + ":" + headers[name] + "\n";
    }
  });
  return result;
}

function getCanonicalizedResource(bucket, objectName, parameters) {
  if (bucket === void 0) {
    bucket = '';
  }

  if (objectName === void 0) {
    objectName = '';
  }

  var resourcePath = '';

  if (bucket) {
    resourcePath += "/" + bucket;
  }

  if (objectName) {
    if (objectName.charAt(0) !== '/') {
      resourcePath += '/';
    }

    resourcePath += objectName;
  }

  var canonicalizedResource = "" + resourcePath;
  var separatorString = '?';

  if (parameters) {
    var compareFunc = function compareFunc(entry1, entry2) {
      if (entry1[0] > entry2[0]) {
        return 1;
      }

      if (entry1[0] < entry2[0]) {
        return -1;
      }

      return 0;
    };

    var processFunc = function processFunc(key) {
      canonicalizedResource += separatorString + key;

      if (parameters[key]) {
        canonicalizedResource += "=" + parameters[key];
      }

      separatorString = '&';
    };

    Object.keys(parameters).sort(compareFunc).forEach(processFunc);
  }

  return canonicalizedResource;
}

function getSignature(options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$type = _options.type,
      type = _options$type === void 0 ? 'header' : _options$type,
      _options$verb = _options.verb,
      verb = _options$verb === void 0 ? '' : _options$verb,
      _options$contentMd = _options.contentMd5,
      contentMd5 = _options$contentMd === void 0 ? '' : _options$contentMd,
      _options$expires = _options.expires,
      expires = _options$expires === void 0 ? unix() + 3600 : _options$expires,
      bucket = _options.bucket,
      objectName = _options.objectName,
      accessKeySecret = _options.accessKeySecret,
      _options$headers = _options.headers,
      headers = _options$headers === void 0 ? {} : _options$headers,
      subResource = _options.subResource;
  var date = headers['x-oss-date'] || '';
  var contentType = headers['Content-Type'] || '';
  var data = [verb, contentMd5, contentType];

  if (type === 'header') {
    data.push(date);
  } else {
    data.push(expires);
  }

  var canonicalizedOSSHeaders = getCanonicalizedOSSHeaders(headers);
  var canonicalizedResource = getCanonicalizedResource(bucket, objectName, subResource);
  data.push("" + canonicalizedOSSHeaders + canonicalizedResource);
  var text = data.join('\n');
  var hmac = new _digest["default"].HMAC_SHA1();
  hmac.setKey(accessKeySecret);
  hmac.update(text);
  var hashBuf = new Uint8Array(hmac.finalize());

  var signature = _base64Js["default"].fromByteArray(hashBuf);

  return signature;
}